.. _magic_functions:

================
魔法函数与特殊变量
================

.. contents:: :local:


.. _introduction:

简介
------------

在 Python 中，魔法方法（Magic Methods）和特殊变量（Special Variables）都是通过特定的命名规则来定义的。魔法方法是一种在类中定义的特殊方法，它们以双下划线开头和结尾。Python 对象可以说天生就具有这些魔法方法，我们也可以通过对类添加或者重载这些特殊方法来实现自己想要的行为。所谓的魔法方法就是通过在类中定义该方法从而为对象赋予特殊的效果。

特殊变量是一些具有特殊含义的变量，它们也以双下划线开头和结尾。

由于 Python 内置魔法方法众多，在此我列举几个的魔法方法和特殊变量进行学习。


.. _magic_funcs:

常见魔法函数与使用
----------------------

对象初始化和销毁
^^^^^^^^^^^^^^^^
**__init__(self, ...)**: 类的初始化方法。这个方法在对象被实例化时自动调用（对象被创建之后再调用，即对象已经存在），允许你执行一些初始化操作，为对象设置初始状态。该函数一般需要手动实现，主要用于对象属性的初始化。

**__new__(cls, ...)**: 对象实例化时第一个调用的方法（对象被创建之前再调用），它只取下 cls 参数，并把其他参数传给 __init__。该方法的返回值通常是类的新实例，它决定了实际创建的对象，可以使用该方法来构建单例模式（一个类只能有一个实例），但一般不常用。

**__del__(self)**: 对象的销毁器。销毁对象，在对象被删除时调用。方法可以包含一些在对象销毁时执行的清理操作，例如关闭文件、释放资源。由于依赖于垃圾回收机制，避免使用该方法来进行关键的清理操作，一般不常用。

字符串表示和格式化
^^^^^^^^^^^^^^^^
**__str__(self)**: 返回对象的友好字符串表示形式，通过 str() 函数调用。将实例对象按照自己的定义的格式用字符串的形式表示出来。使用 str() 和 print() 会直接调用 __str__ 方法。

**__repr__(self)**: 返回对象的官方字符串表示形式，通过 repr() 函数调用。它更倾向于提供更详细和精确的信息，通常用于开发和调试阶段。使用 repr() 会直接调用 __repr__ 方法。

比较操作
^^^^^^^^^^^^^^^^
**__eq__(self, other)**: 定义相等比较，通过 == 运算符调用。

**__ne__(self, other)**: 定义不相等比较，通过 != 运算符调用。

**__lt__(self, other)**: 定义小于比较，通过 < 运算符调用。

**__le__(self, other)**: 定义小于等于比较，通过 <= 运算符调用。

**__gt__(self, other)**: 定义大于比较，通过 > 运算符调用。

**__ge__(self, other)**: 定义大于等于比较，通过 >= 运算符调用。

算术运算
^^^^^^^^^^^^^^^^
**__add__(self, other)**: 定义加法操作，通过 + 运算符调用。

**__sub__(self, other)**: 定义减法操作，通过 - 运算符调用。

**__mul__(self, other)**: 定义乘法操作，通过 * 运算符调用。

**__truediv__(self, other)**: 定义真除法操作，通过 / 运算符调用。

容器操作
^^^^^^^^^^^^^^^^
**__len__(self)**: 返回对象的长度，通过 len() 函数调用。

**__getitem__(self, key)**: 定义对象索引操作，通过 obj[key] 调用。这个方法允许对象像序列一样通过索引来获取元素。

**__setitem__(self, key, value)**: 定义赋值操作，通过 obj[key] = value 调用。这个方法允许对象像序列一样通过索引来设置元素的值。方法通常不要求返回值，但如果希望支持链式赋值，可以返回 self。

**__delitem__(self, key)**: 定义删除操作，通过 del obj[key] 调用。这个方法允许对象像序列一样通过索引来删除元素。

上下文管理
^^^^^^^^^^^^^^^^
**__enter__(self)**: 进入上下文时执行的操作，与 with 语句配合使用。__enter__ 方法应该返回一个对象，这个对象会被赋值给 as 子句中的变量，使得在 with 语句块内可以使用。

**__exit__(self, exc_type, exc_value, traceback)**: 退出上下文时执行的操作，与 with 语句配合使用。self: 表示对象本身，即离开上下文管理器的对象。
exc_type: 表示在 with 语句块内发生的异常的类型，如果没有异常则为 None。
exc_value: 表示在 with 语句块内发生的异常的值，如果没有异常则为 None。
traceback: 表示在 with 语句块内发生的异常的追踪对象，如果没有异常则为 None。


.. _magic_vars:

常见特殊变量与使用
----------------------

对象和类信息
^^^^^^^^^^^^^^^^
*__class__*: 对象所属的类。
*__name__*: 模块的名字，在主程序中为 "__main__"。

文档和注释
^^^^^^^^^^^^^^^^
*__doc__*: 对象的文档字符串。
*__annotations__*: 类型注解字典。

调试和诊断
^^^^^^^^^^^^^^^^
*__module__*: 定义对象的模块名。
*__dict__*: 包含对象命名空间的字典。

实例化和可调用
^^^^^^^^^^^^^^^^
*__call__(self, ...)*: 实例被调用时执行的操作，使对象可调用。

布尔值和长度
^^^^^^^^^^^^^^^^
*__bool__(self)*: 定义对象的布尔值，通过 bool(obj) 调用。
*__len__(self)*: 定义对象的长度，通过 len(obj) 调用。


参考
----------

- `Python 官方文档 - Data Model <https://docs.python.org/3/reference/datamodel.html>`_

- `Python Magic Methods by Example <https://rszalski.github.io/magicmethods/>`_
